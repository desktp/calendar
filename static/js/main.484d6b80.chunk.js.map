{"version":3,"sources":["features/calendar/Calendar.module.css","features/calendar/calendarSlice.js","features/calendar/ReminderForm.js","features/calendar/common/Reminder.js","features/calendar/common/Day.js","features/calendar/Calendar.js","App.js","app/store.js","serviceWorker.js","index.js","features/calendar/common/Reminder.module.css","features/calendar/common/Day.module.css"],"names":["module","exports","calendarSlice","createSlice","name","initialState","reminders","reducers","saveReminder","state","payload","date","split","year","month","day","remindersOfDay","get","text","length","substring","push","setWith","Object","updateReminder","reminder","originalDate","oldYear","oldMonth","oldDay","oldReminder","filter","r","id","deleteReminder","deleteAllReminders","unset","actions","COLORS","handleSave","handleUpdate","handleDelete","useState","time","setTime","setText","city","setCity","color","setColor","cities","setCities","dialogOpen","setDialogOpen","moment","format","getMonth","setMonth","getDay","setDay","editing","setter","func","event","target","value","handleCityInputChange","a","fetch","response","ok","json","handleDialogClose","Card","className","s","root","CardContent","Typography","title","gutterBottom","formActions","formDateWrapper","FormControl","InputLabel","Select","labelId","onChange","map","m","MenuItem","key","daysInMonth","getDaysOfMonth","returnElements","i","renderDays","hour","Math","floor","minutes","timeString","renderTime","TextField","label","inputProps","maxLength","Autocomplete","options","c","country","autoHighlight","onInputChange","reason","renderOption","option","Fragment","renderInput","params","placeholder","autoComplete","colorPreview","style","backgroundColor","CardActions","Button","size","variant","onClick","unix","toString","IconButton","aria-label","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","handleSetEditing","Tooltip","ButtonBase","component","classes","reminderRoot","reminderTime","reminderText","isWeekend","React","anchorEl","setAnchorEl","editingReminder","setEditingReminder","dispatch","useDispatch","useSelector","sort","b","localeCompare","handleClose","Boolean","undefined","cell","weekendCell","currentTarget","d","dayHeader","e","stopPropagation","remindersContainer","Reminder","Popover","anchorOrigin","vertical","horizontal","transformOrigin","ReminderForm","now","setNow","row","skip","Day","calendarHeader","tableRoot","headerCell","body","days","skipCells","rowsNecessary","trunc","renderTableBody","App","CssBaseline","Calendar","persistConfig","storage","whitelist","persistedReducer","persistReducer","combineReducers","calendar","calendarReducer","window","location","hostname","match","store","configureStore","reducer","devTools","process","persistor","persistStore","createPersistedStore","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.484d6b80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"calendarHeader\":\"Calendar_calendarHeader__vbC8v\",\"row\":\"Calendar_row__1zPau\",\"headerCell\":\"Calendar_headerCell__3jAv3\",\"cell\":\"Calendar_cell__H8sTb\",\"weekendCell\":\"Calendar_weekendCell__2Rzfz\",\"root\":\"Calendar_root__1wglb\",\"title\":\"Calendar_title__2aVid\",\"formActions\":\"Calendar_formActions__2Emcm\",\"formDateWrapper\":\"Calendar_formDateWrapper__3KarJ\",\"colorPreview\":\"Calendar_colorPreview__ptZiv\"};","import { createSlice } from '@reduxjs/toolkit';\nimport setWith from 'lodash/setWith';\nimport get from 'lodash/get';\nimport unset from 'lodash/unset';\n\n/**\n * reminders will have an object:key structure to access\n * reminders through year, month and day\n * ex:\n * {\n *   2020: {\n *     4: {\n *       21: [\n *         {\n *           text: 'this is a reminder for apr 21st',\n *           date: '20200421'\n *         }\n *       ],\n *       01: [\n *         {\n *           text: 'this is a reminder for apr 1st',\n *           date: '20200401'\n *         }\n *       ]\n *     }\n *   },\n *   1998: {\n *     7: {\n *       5: [\n *         text: 'this is a reminder for july 7th, 1998',\n *         date: '19980705'\n *       ]\n *     }\n *   }\n * }\n */\n\nexport const calendarSlice = createSlice({\n  name: 'calendar',\n  initialState: {\n    reminders: {}\n  },\n  reducers: {\n    saveReminder: (state, { payload }) => {\n      const [year, month, day] = payload.date.split('-');\n      const remindersOfDay = get(state, `reminders[${year}][${month}][${day}]`, []);\n      \n      if (payload.text.length > 30) {\n        const text = payload.text.substring(0, 30);\n        remindersOfDay.push({ ...payload, text });\n      } else\n        remindersOfDay.push(payload);\n\n      // Just \"mutating\" the object sets the state\n      setWith(state, `reminders[${year}][${month}][${day}]`, remindersOfDay, Object);\n    },\n    updateReminder: (state, { payload }) => {\n      const { reminder, originalDate } = payload;\n\n      // first remove the existing reminder\n      const [oldYear, oldMonth, oldDay] = originalDate.split('-');\n      const oldRemindersOfDay = get(state, `reminders[${oldYear}][${oldMonth}][${oldDay}]`, []);\n      const oldReminder = oldRemindersOfDay.filter(r => r.id !== reminder.id);\n\n      setWith(state, `reminders[${oldYear}][${oldMonth}][${oldDay}]`, oldReminder, Object);\n\n      // Now save the updated reminder\n      const [year, month, day] = reminder.date.split('-');\n\n      const remindersOfDay = get(state, `reminders[${year}][${month}][${day}]`, []);\n  \n      if (reminder.text.length > 30) {\n        const text = reminder.text.substring(0, 30);\n        remindersOfDay.push({ ...reminder, text });\n      } else\n        remindersOfDay.push(reminder);\n\n      // Just \"mutating\" the object sets the state\n      setWith(state, `reminders[${year}][${month}][${day}]`, remindersOfDay, Object);\n    },\n    deleteReminder: (state, { payload }) => {\n      const [year, month, day] = payload.date.split('-');\n      const remindersOfDay = get(state, `reminders[${year}][${month}][${day}]`, []);\n      const reminders = remindersOfDay.filter(r => r.id !== payload.id);\n\n      setWith(state, `reminders[${year}][${month}][${day}]`, reminders, Object);\n    },\n    deleteAllReminders: (state, { payload }) => {\n      const [year, month, day] = payload.split('-');\n      unset(state, `reminders[${year}][${month}][${day}]`);\n    }\n  },\n});\n\nexport const { saveReminder, updateReminder, deleteReminder, deleteAllReminders } = calendarSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = amount => dispatch => {\n//   setTimeout(() => {\n//     dispatch(incrementByAmount(amount));\n//   }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n// export const selectCount = state => state.counter.value;\n\nexport default calendarSlice.reducer;\n","import React, { useState } from 'react';\nimport moment from 'moment';\nimport get from 'lodash/get';\n\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport s from './Calendar.module.css';\n\nconst COLORS = ['#039BE5', '#3F51B5', '#33B679', '#0B8043', '#F4511E', '#F6BF26'];\n\nexport default ({ date, reminder, handleSave, handleUpdate, handleDelete }) => {\n  const [time, setTime] = useState(get(reminder, 'time', '12:00'));\n  const [text, setText] = useState(get(reminder, 'text', ''));\n  const [city, setCity] = useState(get(reminder, 'city', ''));\n  const [color, setColor] = useState(get(reminder, 'color', COLORS[0]));\n  const [cities, setCities] = useState([]);\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const getMonth = (date) => moment(date, 'YYYY-MM-DD').format('MMM');\n  const getDay = (date) => moment(date, 'YYYY-MM-DD').date();\n\n  const [month, setMonth] = useState(getMonth(get(reminder, 'date', date)));\n  const [day, setDay] = useState(getDay(get(reminder, 'date', date)));\n\n  const editing = !!reminder;\n\n  const setter = (func) => (event) => {\n    func(event.target.value);\n  }\n\n  const getDaysOfMonth = (month) => moment(`${date.year()}-${month}`, 'YYYY-MMM').daysInMonth();\n\n  const handleCityInputChange = async (event, value) => {\n    if (value.length >= 3) {\n      const response = await fetch(`https://andruxnet-world-cities-v1.p.rapidapi.com/?query=${value}&searchby=city`, {\n        'headers': {\n          'x-rapidapi-host': 'andruxnet-world-cities-v1.p.rapidapi.com',\n          'x-rapidapi-key': '08d93ac3cemsheeb249be2c736c3p1ae4afjsn9834378cb0a2'\n        }\n      });\n  \n      if (response.ok) {\n        const json = await response.json();\n        setCities(json);\n      }\n    }\n  }\n\n  const handleCitySelect = (event, value, reason) => setCity(value);\n\n  const handleSaveReminder = () => {\n    const payload = {\n      id: editing ? reminder.id : moment().unix().toString(),\n      time,\n      color,\n      text,\n      date: editing ?\n        moment(`${date.year()}-${month}-${day}`, 'YYYY-MMM-DD').format('YYYY-MM-DD')\n        : date.format('YYYY-MM-DD'),\n      city\n    };\n\n    editing ? \n      handleUpdate({ reminder: payload, originalDate: reminder.date }) :\n      handleSave(payload);\n  }\n\n  const handleDeleteReminder = () => {\n    handleDelete(reminder);\n    handleDialogClose();\n  }\n\n  const handleDialogOpen = () => {\n    setDialogOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setDialogOpen(false);\n  };\n\n  const renderColors = () => COLORS.map(c => <MenuItem key={c} value={c}><div className={s.colorPreview} style={{ backgroundColor: c }} /></MenuItem>)\n\n  const renderTime = () => {\n    const returnElements = [];\n    // 96 is the result of breaking 24 hours\n    // into 15 minutes pieces\n    for (let i = 0; i <= 95; i += 1) {\n      const hour = Math.floor(i / 4);\n      const minutes = (i % 4) * 15;\n      const timeString = `${hour < 10 ? `0${hour}` : hour}:${minutes === 0 ? '00' : minutes}`\n\n      returnElements.push(\n        <MenuItem value={timeString} key={timeString}>\n          {timeString}\n        </MenuItem>\n      );\n    }\n\n    return returnElements;\n  }\n\n  const renderMonths = () => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    return months.map(m => <MenuItem value={m} key={m}>{m}</MenuItem>)\n  }\n\n  const renderDays = () => {\n    const daysInMonth = getDaysOfMonth(month);\n    const returnElements = [];\n\n    for (let i = 1; i <= daysInMonth; i += 1) {\n      returnElements.push(<MenuItem value={i} key={i}>{i}</MenuItem>)\n    }\n\n    return returnElements;\n  }\n\n  return (\n    <>\n      <Card className={s.root}>\n        <CardContent>\n          <Typography className={s.title} gutterBottom>\n            {editing ? 'Edit' : 'Add'} reminder\n          </Typography>\n          <div className={s.formActions}>\n            {\n              editing ?\n                <div className={s.formDateWrapper}>\n                  <FormControl>\n                    <InputLabel id='month'>Month</InputLabel>\n                    <Select\n                      labelId='month'\n                      id='month'\n                      value={month}\n                      onChange={setter(setMonth)}\n                    >\n                      {renderMonths()}\n                    </Select>\n                  </FormControl>\n                  <FormControl>\n                    <InputLabel id='day'>Day</InputLabel>\n                    <Select\n                      labelId='day'\n                      id='day'\n                      value={day}\n                      onChange={setter(setDay)}\n                    >\n                      {renderDays()}\n                    </Select>\n                  </FormControl>\n                </div>\n                :\n                <Typography color='textSecondary' gutterBottom>\n                  {date.format('MMM do')}\n                </Typography>\n            }\n            <FormControl>\n              <InputLabel id='time'>Time</InputLabel>\n              <Select\n                labelId='time'\n                id='time'\n                value={time}\n                onChange={setter(setTime)}\n              >\n                {renderTime()}\n              </Select>\n            </FormControl>\n            <FormControl>\n              <TextField\n                id='reminderText'\n                label='Text'\n                value={text}\n                onChange={setter(setText)}\n                inputProps={{ maxLength: 30 }}\n              />\n            </FormControl>\n            <FormControl>\n            <Autocomplete\n              id='city-autocomplete'\n              options={cities.map(c => `${c.city}, ${c.country}`)}\n              autoHighlight\n              onInputChange={handleCityInputChange}\n              onChange={handleCitySelect}\n              value={city}\n              renderOption={(option) => (\n                <React.Fragment>\n                  {option}\n                </React.Fragment>\n              )}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label='City'\n                  placeholder='Being typing to search'\n                  inputProps={{\n                    ...params.inputProps,\n                    autoComplete: 'new-password'\n                  }}\n                />\n              )}\n            />\n            </FormControl>\n            <FormControl>\n              <InputLabel id='color'>Color</InputLabel>\n              <Select\n                labelId='color'\n                id='color'\n                value={color}\n                onChange={setter(setColor)}\n              >\n                {renderColors()}\n              </Select>\n            </FormControl>\n          </div>\n        </CardContent>\n        <CardActions>\n          <Button size='small' color='primary' variant='contained' onClick={handleSaveReminder}>\n            {editing ? 'Update' : 'Create'}\n          </Button>\n          {editing && \n            <IconButton aria-label='delete' color='secondary' onClick={handleDialogOpen}>\n              <DeleteIcon />\n            </IconButton>\n          }\n        </CardActions>\n      </Card>\n      <Dialog\n        open={dialogOpen}\n        onClose={handleDialogClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>Delete reminder</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Are you sure you want to delete?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose} color='primary'>\n            Cancel\n          </Button>\n          <Button onClick={handleDeleteReminder} color='secondary'>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}","import React from 'react';\n\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport s from './Reminder.module.css';\n\nexport default ({ reminder, handleSetEditing }) => {\n  const handleClick = () => handleSetEditing(reminder);\n\n  return (\n    <Tooltip title='Edit reminder'>\n      <ButtonBase\n        component='div'\n        style={{\n          backgroundColor: reminder.color\n        }}\n        onClick={handleClick}\n        classes={{\n          root: s.reminderRoot\n        }}\n        >\n        <span className={s.reminderTime}>{reminder.time}</span>\n        <span className={s.reminderText}>{reminder.text}</span>\n      </ButtonBase>\n    </Tooltip>\n  )\n}\n","import React, { useState } from 'react';\nimport get from 'lodash/get';\n\nimport Popover from '@material-ui/core/Popover';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { saveReminder, updateReminder, deleteReminder, deleteAllReminders } from '../calendarSlice';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ReminderForm from '../ReminderForm';\nimport Reminder from './Reminder';\n\nimport s from '../Calendar.module.css';\nimport d from './Day.module.css';\n\nexport default ({ date, isWeekend }) => {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [editingReminder, setEditingReminder] = useState();\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const dispatch = useDispatch();\n  const reminders = useSelector((state) => {\n    const formattedDate = date.format('YYYY-MM-DD');\n    const [year, month, day] = formattedDate.split('-');\n    const reminders = get(state, `calendar.reminders[${year}][${month}][${day}]`, []);\n\n    return [...reminders].sort((a, b) => a.time.localeCompare(b.time));\n  });\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setEditingReminder();\n    setAnchorEl(null);\n  };\n\n  const handleDialogOpen = (e) => {\n    e.stopPropagation();\n    setDialogOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setDialogOpen(false);\n  };\n\n  const handleSetEditing = (reminder) => setEditingReminder(reminder);\n\n  const handleSave = (reminder) => {\n    dispatch(saveReminder(reminder));\n\n    handleClose();\n  }\n\n  const handleUpdate = (payload) => {\n    dispatch(updateReminder(payload));\n\n    handleClose();\n  }\n\n  const handleDelete = (payload) => {\n    dispatch(deleteReminder(payload));\n\n    handleClose();\n  }\n\n  const handleDeleteAll = () => {\n    dispatch(deleteAllReminders(date.format('YYYY-MM-DD')));\n\n    handleDialogClose();\n  }\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <>\n      <div className={`${s.cell} ${isWeekend ? s.weekendCell : ''}`} onClick={handleClick}>\n        <div className={d.dayHeader}>\n          <span>{date.format('DD')}</span>\n          {reminders.length ?\n            <Tooltip title='Clear day'>\n              <IconButton aria-label='delete' color='secondary' size='small' onClick={handleDialogOpen}>\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n            : <></>\n          }\n        </div>\n        <div className={d.remindersContainer}>\n          {reminders.map(r => <Reminder key={r.id} reminder={r} handleSetEditing={handleSetEditing} />)}\n        </div>\n      </div>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <ReminderForm\n          date={date}\n          reminder={editingReminder}\n          handleSave={handleSave}\n          handleUpdate={handleUpdate}\n          handleDelete={handleDelete}\n        />\n      </Popover>\n      <Dialog\n        open={dialogOpen}\n        onClose={handleDialogClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>Clear day</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            This will delete ALL reminders for this day!\n          </DialogContentText>\n          <DialogContentText id='alert-dialog-description'>\n            Are you sure?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose} color='primary'>\n            Cancel\n          </Button>\n          <Button onClick={handleDeleteAll} color='secondary'>\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  )\n}","import React, { useState } from 'react';\nimport moment from 'moment';\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\n\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\n\nimport Day from './common/Day';\n\nimport s from './Calendar.module.css';\n\nexport default () => {\n  const [now, setNow] = useState(moment());\n  const [, setMonth] = useState(now.month());\n\n  const previousMonth = () => {\n    if (now.month() === 0) {\n      setMonth(11);\n      setNow(now.year(now.year() - 1).month(11))\n    } else {\n      const m = now.month() - 1;\n      setMonth(m);\n      setNow(now.month(m))\n    }\n  }\n\n  const nextMonth = () => {\n    if (now.month() === 11) {\n      setMonth(0);\n      setNow(now.year(now.year() + 1).month(0));\n    } else {\n      const m = now.month() + 1;\n      setMonth(m);\n      setNow(now.month(m))\n    }\n  }\n\n  const renderTableBody = () => {\n    const days = now.daysInMonth();\n    // Gets day of the week of first day of the month\n    const skipCells = moment(now).date(1).day();\n    const returnElements = [];\n    const rowsNecessary = Math.trunc((days + skipCells) / 7);\n\n    for (let i = 0; i <= rowsNecessary; i += 1) {\n      returnElements.push(\n        <div className={s.row} key={`row_${i}`}>\n          {renderDays(i, skipCells)}\n        </div>\n      )\n    }\n\n    return returnElements;\n  }\n\n  const renderDays = (row, skip = 0) => {\n    const returnElements = [];\n\n    for (let i = 1; i <= 7; i += 1) {\n      const day = (i - skip) + (row * 7);\n      const isWeekend = i === 1 || i === 7;\n      if ((row === 0 && skip >= i) || day > now.daysInMonth())\n        returnElements.push(<div className={`${s.cell} ${isWeekend ? s.weekendCell : ''}` } key={`cell_${day}`}></div>);\n      else {\n        returnElements.push(<Day key={`cell_${day}`} date={moment(now).date(day)} isWeekend={isWeekend} />);\n      }\n    }\n\n    return returnElements;\n  }\n\n  return (\n    <>\n      <div className={s.calendarHeader}>\n        <div>\n          <Tooltip title='Previous month'>\n            <IconButton aria-label='previous' onClick={previousMonth}>\n              <ChevronLeft />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title='Next month'>\n            <IconButton aria-label='next' onClick={nextMonth}>\n              <ChevronRight />\n            </IconButton>\n          </Tooltip>\n        </div>\n        <Typography variant='h4'>{now.format('MMMM (YYYY)')}</Typography>\n      </div>\n    \n      <div className={s.tableRoot}>\n        <div className={s.row}>\n          <div className={s.headerCell}>Sunday</div>\n          <div className={s.headerCell}>Monday</div>\n          <div className={s.headerCell}>Tuesday</div>\n          <div className={s.headerCell}>Wednesday</div>\n          <div className={s.headerCell}>Thursday</div>\n          <div className={s.headerCell}>Friday</div>\n          <div className={s.headerCell}>Saturday</div>\n        </div>\n        <div className={s.body}>\n          {renderTableBody()}\n        </div>\n      </div>\n    </>\n  )\n}","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport Calendar from './features/calendar/Calendar';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <Calendar />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport calendarReducer from '../features/calendar/calendarSlice';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  whitelist: ['calendar']\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, combineReducers({ calendar: calendarReducer }));\r\n\r\nexport default () => {\r\n  let store = configureStore({\r\n    reducer: persistedReducer,\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n  });\r\n  let persistor = persistStore(store)\r\n  return { store, persistor }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport createPersistedStore from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst { store, persistor } = createPersistedStore();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reminderRoot\":\"Reminder_reminderRoot__2Zul8\",\"reminderTime\":\"Reminder_reminderTime__2VMNg\",\"reminderText\":\"Reminder_reminderText__3D4Bc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dayHeader\":\"Day_dayHeader__RBF0p\",\"remindersContainer\":\"Day_remindersContainer__2XhbB\"};"],"sourceRoot":""}